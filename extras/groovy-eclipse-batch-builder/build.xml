<?xml version="1.0" encoding="UTF-8"?>

<!--
  To use this script:
    1) Clone Groovy-Eclipse from git and set up a workspace with at least these projects:
        - org.codehaus.groovyXX
        - org.eclipse.jdt.core
        - org.eclipse.jdt.groovy.core
        - org.codehaus.groovy.eclipse.ant
    2) Update build.properties to point to the appropriate locations and versions
    3) Comment/uncomment do-24-build, do-25-build or ... (exactly one of these must be uncommented at once)
    4a) run `extract-create` to build the groovy-eclipse-batch jar and pom
     OR
    4b) run `extract-create-install` to build groovy-eclipse-batch and install it locally
     OR
    4c) run `publish` to publish to codehaus and mirror it on maven central
-->
<project name="groovy-eclipse-batch" basedir="." default="extract-create">

    <property file="build.properties"/>
    <property name="jar.dest" location="${basedir}/build"/>
    <property name="jar.prefix" value="groovy-eclipse-batch"/>
    <property name="extract.loc" location="${jar.dest}/extract"/>

    <import file="maven/build-maven.xml"/>


    <target name="clean">
        <delete dir="build" quiet="true"/>
    </target>


    <target name="extract-create" depends="-init,-extract" description="Create artifacts for deployment">
        <property name="jar.name" value="${jar.prefix}-${version}.jar"/>
        <property name="pom.name" value="${jar.prefix}-${version}.pom"/>

        <!-- create groovy-eclipse-batch.jar from extract directory -->
        <jar destfile="${jar.dest}/${jar.name}" manifest="maven/MANIFEST.MF">
            <fileset dir="${extract.loc}">
                <exclude name="**/*.g"/>
                <exclude name="**/*.groovy"/>
                <exclude name="**/*.html"/>
                <exclude name="**/*.jar"/>
                <exclude name="**/*.java"/>
                <exclude name="**/*.smap"/>

                <exclude name=".api_description"/>
                <exclude name=".options"/>
                <exclude name="about_files/**"/>
                <exclude name="ant_tasks/**"/>
                <exclude name="plugin.*"/>
                <exclude name="org/codehaus/groovy/activator/**"/>
                <exclude name="script.js"/>
                <exclude name="stylesheet.css"/>
                <exclude name="META-INF/eclipse.inf"/>
                <exclude name="META-INF/maven/**"/>
                <exclude name="META-INF/*.RSA"/>
                <exclude name="META-INF/*.SF"/>
            </fileset>
        </jar>

        <!-- copy pom.xml and inject version -->
        <copy file="maven/pom.xml" tofile="${jar.dest}/${pom.name}"/>
        <replace file="${jar.dest}/${pom.name}" token="REPLACE_WITH_VERSION" value="${version}"/>
    </target>


    <target name="install" depends="extract-create,-mavenInit" description="Install artifacts to local repository">
        <mavenInstall version="${version}" prefix="${jar.prefix}"/>
    </target>


    <target name="publish" depends="install,-mavenDeployInit" description="Publish artifacts to remote repository">
        <mavenDeploy version="${version}" prefix="${jar.prefix}"/>
    </target>


    <target name="-extract" description="extract the contents of all jars and copy them to the extract location">
        <mkdir dir="${jar.dest}"/>
        <delete dir="${extract.loc}" quiet="true"/>
        <mkdir dir="${extract.loc}"/>

        <unzip dest="${extract.loc}">
            <fileset refid="orig.plugin.jars"/>
            <fileset refid="orig.groovy.jars"/>
        </unzip>

        <!-- Overwrite existing with classes from workspace bin folders-->
        <copy todir="${extract.loc}">
            <fileset refid="jdt.groovy.core.class.files"/>
            <fileset refid="jdt.core.class.files"/>
            <fileset refid="groovy.core.class.files"/>
            <fileset refid="groovy.trace.class.files"/>
            <fileset refid="ant.groovy.class.files"/>
        </copy>

        <!-- now unzip the jdt compiler adapter jar. It's a jar within a jar. -->
        <unzip dest="${extract.loc}" src="${git.repo.loc}/jdt-patch/${jdt.patch.target}/org.eclipse.jdt.core/jdtCompilerAdapter.jar"/>
    </target>


    <target name="-init" depends="-fail-if-no-version-specified,-init24,-init25">
        <fileset dir="${eclipse.install.plugins}" id="orig.plugin.jars">
            <include name="org.eclipse.osgi_*.jar"/>
            <include name="org.eclipse.core.runtime_*.jar"/>
            <include name="org.eclipse.core.resources_*.jar"/>
            <include name="org.eclipse.core.filesystem_*.jar"/>
            <include name="org.eclipse.core.contenttype_*.jar"/>
            <include name="org.eclipse.equinox.common_*.jar"/>
            <include name="org.eclipse.core.jobs_*.jar"/>
            <include name="org.eclipse.text_*.jar"/>
            <include name="org.eclipse.jdt.core_*.jar"/>
            <include name="org.eclipse.jdt.compiler.apt_*.jar"/>
        </fileset>

        <fileset dir="${git.repo.loc}/base" id="orig.groovy.jars">
            <!-- include groovy and the sources -->
            <include name="${groovy.folder}/lib/groovy-*.jar"/>
            <!-- also include the non-locking classloader with sources -->
            <include name="org.eclipse.jdt.groovy.core/nlcl*.jar"/>
        </fileset>
        <fileset dir="${git.repo.loc}/base/org.eclipse.jdt.groovy.core/bin" id="jdt.groovy.core.class.files">
            <include name="**/*.*"/>
        </fileset>
        <fileset dir="${git.repo.loc}/jdt-patch/${jdt.patch.target}/org.eclipse.jdt.core/bin" id="jdt.core.class.files">
            <include name="**/*.*"/>
        </fileset>
        <!-- ensure that this comes after the core groovy compiler files because the groovy-eclipse.jar must overwrite the groovy.jar -->
        <fileset dir="${git.repo.loc}/base/${groovy.folder}/bin" id="groovy.core.class.files">
            <include name="**/*.*"/>
        </fileset>
        <fileset dir="${git.repo.loc}/base/${groovy.folder}/bin-trace" id="groovy.trace.class.files">
            <include name="**/*.*"/>
        </fileset>
        <fileset dir="${git.repo.loc}/ide/org.codehaus.groovy.eclipse.ant/bin-ant" id="ant.groovy.class.files">
            <include name="**/*.*"/>
        </fileset>
    </target>


    <target name="-init24" if="do-24-build">
        <echo message="Building groovy 2.4.x"/>
        <property name="version" value="${version2.4}"/>
        <property name="groovy.folder" value="org.codehaus.groovy24"/>
    </target>


    <target name="-init25" if="do-25-build">
        <echo message="Building groovy 2.5.x"/>
        <property name="version" value="${version2.5}"/>
        <property name="groovy.folder" value="org.codehaus.groovy25"/>
    </target>


    <target name="-init26" if="do-26-build">
        <echo message="Building groovy 2.6.x"/>
        <property name="version" value="${version2.6}"/>
        <property name="groovy.folder" value="org.codehaus.groovy26"/>
    </target>


    <target name="-check-build-version">
        <property file="build.properties"/>
        <condition property="no-version-specified">
            <not>
            <or>
                <isset property="do-24-build"/>
                <isset property="do-25-build"/>
                <isset property="do-26-build"/>
            </or>
            </not>
        </condition>
    </target>


    <target name="-fail-if-no-version-specified" depends="-check-build-version" if="no-version-specified">
        <fail message="You must set exactly one of do-XX-build to specify a groovy version to build"/>
    </target>

</project>
